//
//  VideoDanmakuDemoViewController.h
//  LNDanmakuMaster
//
//  Created by Levison on 31.1.21.
//  Copyright © 2021 Levison. All rights reserved.
//

#import <UIKit/UIKit.h>

NS_ASSUME_NONNULL_BEGIN

//Not finished yet.

/*
 * 这个Demo用来演示如何在实际的视频弹幕场景下应用LNDanmaku。
 * 事实上，LNDanmaku并不具备直接与视频(进度)对接的能力，它仅仅作为弹幕的展示工具。
 * 也正因如此，LNDanmaku也可以应用在除了视频弹幕外的其他场景中。
 * 例如：在Feed流中加入一个不断播放图片的模块，LNDanmaku也同样能胜任。
 **/

/*
 * 通常来说，想要将LNDanmaku应用在视频播放中，你应当在LNDanmaku外部增加一个业务层用来保持视频播放器与LNDanmaku联动。
 * 这个业务层组件通常作为视频播放器的一个插件：XXVideoDanmakuPlayer。
 * 这个组件内部维护一个LNDanmaku用来播放，并自身接收来自视频播放器的回调来控制弹幕播放进度和一系列事件。
 * 视频播放器与弹幕播放器的交互是单方面的：视频播放器会影响弹幕播放器，但弹幕播放器不会影响视频播放器。
 **/

/*
 * 如何保证弹幕播放进度与视频播放进度吻合？
 * 在最初设计弹幕播放器时，我们计划不对弹幕播放器进行分层，只在内部对数据做隔离：
 * 使用两条队列A、B分别对应"不可播放弹幕"和"等待播放弹幕"。
 * 将队列A视为一整根胡萝卜，B视为一个临时容纳胡萝卜丁的盘子，那么：
 * 我们在每次视频播放器的帧回调时将胡萝卜A切下一小块"o",这个"o"会进入队列B的队尾，B中容纳的所有胡萝卜丁都是可以吃(播)的。
 * 如果B已经装满了，那么先加入B中的胡萝卜丁会被抛弃掉，这样就总是能保证萝卜丁是新鲜的(与视频内容对应的)。
 * 那么,弹幕播放器只要不断从B的队首取弹幕进行播放就好了。
 *
 * 后来，队列A被划分到了业务层(并不是所有的弹幕都用在视频上)，B则留在了LNDanmaku底层，业务层通过不断向B中丢萝卜丁实现弹幕播放。
 * 出于访问性能和弹幕下发制约的一些因素，队列A最终以可变字典的形式实现，字典的key是数字类型,value是数组类型。
 * 我们将某个小时间段内的弹幕全部装在一系列小数组中，例如：0s对应一个列表的弹幕，这些弹幕的起播时间都在 0~1s之间，1对应1~2s，以此类推。
 * 这样做的好处是：如果你想seek到某个时间点就不用遍历一个装着整个视频所有弹幕的大数组，而是先取整，通过时间片映射取到一个小弹幕数组，遍历那个小数组。
 * 1s钟内弹幕吞吐量是固定的(与轨道数和弹幕平均存活时间相关)，所以这个小数组一定足够小(大于吞吐量的部分会被队列B抛弃)，所以一般不必担心这里遍历的耗时。
 **/

/*
 * 与视频seek对应的弹幕恢复功能一并在这个Demo中体现。
 **/

@interface VideoDanmakuDemoViewController : UIViewController

@end

NS_ASSUME_NONNULL_END
